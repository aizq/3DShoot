// Copyright (c) 2017-2020 Xiamen Yaji Software Co., Ltd.

CCEffect %{
  techniques:
  - name: opaque
    passes:
    - vert: standard-vs
      frag: standard-fs
      properties: &props
        # scanRadius:           { value: -1.0,}
        # scanCenter:           { value: [1.0, 1.0, 1.0,1.0] }
        # scanColor:           { value: [1.0, 0.0, 0.0,1.0],editor: { type: color } }
        weather:              { value: 0.0,}
        alphaDiscard:         { value: 0.0, editor: {  slide: true, range: [0, 1.0], step: 0.001 } }
        tilingOffset:         { value: [1.0, 1.0, 0.0, 0.0] }
        mainColor:            { value: [1.0, 1.0, 1.0, 1.0], target: albedo, linear: true, editor: { displayName: Albedo, type: color } }
        albedoScale:          { value: [1.0, 1.0, 1.0], target: albedoScaleAndCutoff.xyz }
        alphaThreshold:       { value: 0.5, target: albedoScaleAndCutoff.w, editor: { parent: USE_ALPHA_TEST, slide: true, range: [0, 1.0], step: 0.001 } }
        occlusion:            { value: 1.0, target: pbrParams.x, editor: { slide: true, range: [0, 1.0], step: 0.001 } }
        roughness:            { value: 0.8, target: pbrParams.y, editor: { slide: true, range: [0, 1.0], step: 0.001 } }
        metallic:             { value: 0.6, target: pbrParams.z, editor: { slide: true, range: [0, 1.0], step: 0.001 } }
        specularIntensity:    { value: 0.5, target: pbrParams.w, editor: { slide: true, range: [0.0, 1.0], step: 0.001 } }
        emissive:             { value: [0.0, 0.0, 0.0, 1.0], linear: true, editor: { type: color } }
        emissiveScale:        { value: [1.0, 1.0, 1.0], target: emissiveScaleParam.xyz }
        normalStrength:       { value: 1.0, target: emissiveScaleParam.w, editor: { parent: USE_NORMAL_MAP, slide: true, range: [0, 5.0], step: 0.001 } }
        mainTexture:          { value: grey, target: albedoMap, editor: { displayName: AlbedoMap } }
        # normalMap:            { value: normal }
        # pbrMap:               { value: grey }
        # metallicRoughnessMap: { value: grey }
        # occlusionMap:         { value: white }
        # emissiveMap:          { value: grey }


        #第一张采样贴图
        terrain_sample_0:     {value: white}
        #第一张采样图 r 通道贴图
        terrain_0_r:          {value: white}
        terrain_0_r_n:          {value: white}
        #第一张采样图 g 通道贴图
        terrain_0_g:          {value: white}
        terrain_0_g_n:          {value: white}
        #第一张采样图 b 通道贴图
        terrain_0_b:          {value: white}
        terrain_0_b_n:          {value: white}
       
        #第二张采样贴图
        terrain_sample_1:     {value: white}
        #第一张采样图 r 通道贴图
        terrain_1_r:          {value: white}
        terrain_1_r_n:          {value: white}
        #第一张采样图 g 通道贴图
        terrain_1_g:          {value: white}
        terrain_1_g_n:          {value: white}
        #第一张采样图 b 通道贴图
        terrain_1_b:          {value: white}
        terrain_1_b_n:          {value: white}
    - &forward-add
      vert: standard-vs
      frag: standard-fs
      phase: forward-add
      propertyIndex: 0
      embeddedMacros: { CC_FORWARD_ADD: true }
      depthStencilState:
        depthFunc: equal
        depthTest: true
        depthWrite: false
      blendState:
        targets:
        - blend: true
          blendSrc: one
          blendDst: one
          blendSrcAlpha: zero
          blendDstAlpha: one
    - &shadow-caster
      vert: shadow-caster-vs:vert
      frag: shadow-caster-fs:frag
      phase: shadow-caster
      propertyIndex: 0
      rasterizerState:
        cullMode: front
      properties:
        tilingOffset:   { value: [1.0, 1.0, 0.0, 0.0] }
        mainColor:      { value: [1.0, 1.0, 1.0, 1.0], target: albedo, editor: { displayName: Albedo, type: color } }
        albedoScale:    { value: [1.0, 1.0, 1.0], target: albedoScaleAndCutoff.xyz }
        alphaThreshold: { value: 0.5, target: albedoScaleAndCutoff.w, editor: { parent: USE_ALPHA_TEST } }
        mainTexture:    { value: grey, target: albedoMap, editor: { displayName: AlbedoMap } }
  - name: transparent
    passes:
    - vert: standard-vs
      frag: standard-fs
      embeddedMacros: { CC_FORCE_FORWARD_SHADING: true }
      depthStencilState:
        depthTest: true
        depthWrite: false
      blendState:
        targets:
        - blend: true
          blendSrc: src_alpha
          blendDst: one_minus_src_alpha
          blendDstAlpha: one_minus_src_alpha
      properties: *props
    - *forward-add
    - *shadow-caster
}%

CCProgram shared-ubos %{
  uniform Constants {
    vec4 tilingOffset;
    vec4 albedo;
    vec4 albedoScaleAndCutoff;
    vec4 pbrParams;
    vec4 emissive;
    vec4 emissiveScaleParam;
   
    // vec4 scanCenter;
    // vec4 scanColor;
    // float scanRadius;
    float weather;

    float alphaDiscard;
    
  };
}%

CCProgram standard-vs %{
  precision highp float;
  #include <legacy/input-standard>
  #include <builtin/uniforms/cc-global>
  #include <legacy/decode-base>
  #include <legacy/local-batch>
  #include <shared-ubos>
  #include <legacy/fog-vs>
  #include <legacy/shadow-map-vs>

  // #if USE_VERTEX_COLOR
  //   in vec4 a_color;
  //   out lowp vec4 v_color;
  // #endif

  out vec3 v_position;
  out mediump vec3 v_normal;
  out vec2 v_uv;
  // #if HAS_SECOND_UV
  //   out mediump vec2 v_uv1;
  // #endif

  #if CC_RECEIVE_SHADOW
    out mediump vec2 v_shadowBias;
  #endif

  // #if USE_NORMAL_MAP
  //   out mediump vec4 v_tangent;
  // #endif
  out mediump vec4 v_tangent;

  // #if HAS_SECOND_UV || CC_USE_LIGHTMAP
  //   in vec2 a_texCoord1;
  // #endif

  // #if CC_USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD
  //   #include <legacy/lightingmap-vs>
  // #endif

  void main () {
    StandardVertInput In;
    CCVertInput(In);

    mat4 matWorld, matWorldIT;
    CCGetWorldMatrixFull(matWorld, matWorldIT);

    vec4 pos = matWorld * In.position;

    v_position = pos.xyz;
    v_normal = normalize((matWorldIT * vec4(In.normal, 0.0)).xyz);

    #if CC_RECEIVE_SHADOW
      v_shadowBias = CCGetShadowBias();
    #endif

    // #if USE_TWOSIDE
    //   vec3 viewDirect = normalize(cc_cameraPos.xyz - v_position);
    //   v_normal *= dot(v_normal, viewDirect) < 0.0 ? -1.0 : 1.0;
    // #endif

    // #if USE_NORMAL_MAP
    //   v_tangent.xyz = normalize((matWorld * vec4(In.tangent.xyz, 0.0)).xyz);
    //   v_tangent.w = In.tangent.w;
    // #endif
    v_tangent.xyz = normalize((matWorld * vec4(In.tangent.xyz, 0.0)).xyz);
    v_tangent.w = In.tangent.w;

    v_uv = a_texCoord * tilingOffset.xy + tilingOffset.zw;
    // #if SAMPLE_FROM_RT
    //   CC_HANDLE_RT_SAMPLE_FLIP(v_uv);
    // #endif
    // #if HAS_SECOND_UV
    //   v_uv1 = a_texCoord1 * tilingOffset.xy + tilingOffset.zw;
    //   #if SAMPLE_FROM_RT
    //     CC_HANDLE_RT_SAMPLE_FLIP(v_uv1);
    //   #endif
    // #endif

    // #if USE_VERTEX_COLOR
    //   v_color = a_color;
    // #endif

    CC_TRANSFER_FOG(pos);
    CC_TRANSFER_SHADOW(pos);

    // #if CC_USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD
    //   CCLightingMapCaclUV();
    // #endif

    gl_Position = cc_matProj * (cc_matView * matWorld) * In.position;
  }
}%

CCProgram standard-fs %{
  precision highp float;
  #include <builtin/uniforms/cc-global>
  #include <shared-ubos>
  #include <legacy/fog-fs>
  #include <legacy/standard-surface-entry>
  #if CC_USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD
    #include <legacy/lightingmap-fs>
  #endif

  in vec3 v_position;
  in vec2 v_uv;
   in mediump vec4 v_tangent;
  // #if HAS_SECOND_UV
  //   in mediump vec2 v_uv1;
  // #endif
  in mediump vec3 v_normal;

  #if CC_RECEIVE_SHADOW
    in mediump vec2 v_shadowBias;
  #endif

  // #if USE_VERTEX_COLOR
  //   in lowp vec4 v_color;
  // #endif

  #if USE_ALBEDO_MAP
    uniform sampler2D albedoMap;

    uniform sampler2D terrain_sample_0;
    uniform sampler2D terrain_0_r;
    uniform sampler2D terrain_0_r_n;
    uniform sampler2D terrain_0_g;
    uniform sampler2D terrain_0_g_n;
    uniform sampler2D terrain_0_b;
    uniform sampler2D terrain_0_b_n;

    uniform sampler2D terrain_sample_1;
    uniform sampler2D terrain_1_r;
    uniform sampler2D terrain_1_r_n;
    uniform sampler2D terrain_1_g;
    uniform sampler2D terrain_1_g_n;
    uniform sampler2D terrain_1_b;
    uniform sampler2D terrain_1_b_n;

    #pragma define-meta ALBEDO_UV options([v_uv, v_uv1])
  #endif
  // #if USE_NORMAL_MAP
   
  //   // uniform sampler2D normalMap;
  //   #pragma define-meta NORMAL_UV options([v_uv, v_uv1])
  // #endif
  // #pragma define-meta PBR_UV options([v_uv, v_uv1])
  // #if USE_PBR_MAP
  //   uniform sampler2D pbrMap;
  // #endif
  // #if USE_METALLIC_ROUGHNESS_MAP
  //   uniform sampler2D metallicRoughnessMap;
  // #endif
  // #if USE_OCCLUSION_MAP
  //   uniform sampler2D occlusionMap;
  // #endif
  // #if USE_EMISSIVE_MAP
  //   uniform sampler2D emissiveMap;
  //   #pragma define-meta EMISSIVE_UV options([v_uv, v_uv1])
  // #endif

  #pragma define OCCLUSION_CHANNEL          r
  #pragma define ROUGHNESS_CHANNEL          g
  #pragma define METALLIC_CHANNEL           b
  #pragma define SPECULAR_INTENSITY_CHANNEL a

  #if USE_ALPHA_TEST
    #pragma define-meta ALPHA_TEST_CHANNEL options([a, r])
  #endif


  /*
  * 自定义地图采样
  */
  void customSample(inout vec4 col,inout vec3 normal){
    vec3 bitangent = cross(v_normal, v_tangent.xyz) * v_tangent.w;
    vec3 c_normal=normal;
    vec3 temp_normal=vec3(1.0,1.0,1.0);
    vec2 uv=ALBEDO_UV;
    vec3 nmmp=vec3(1.0,1.0,1.0);
    col= texture(albedoMap, ALBEDO_UV*40.0);

    //第一张采样贴图进行采样
    vec3 mormalStrength_0=vec3(2.0,2.0,1.0);
    vec2 terrain_0_uv=uv;
    vec4 terrain_0_col= texture(terrain_sample_0, terrain_0_uv);
    // r通道进行处理  水泥地
    vec2 terrain_0_r_uv=uv*60.0;
    vec4 terrain_0_r_col= texture(terrain_0_r, terrain_0_r_uv);
    col.rbg=mix( col.rbg,terrain_0_r_col.rbg,  terrain_0_col.r);

    nmmp= texture(terrain_0_r_n, terrain_0_r_uv).xyz - vec3(0.5);
    temp_normal = (nmmp.x *mormalStrength_0.x) * normalize(v_tangent.xyz) +(nmmp.y * mormalStrength_0.x) * normalize(bitangent) +nmmp.z * normalize(c_normal);
    normal=mix(normal,temp_normal,terrain_0_col.r);
    
    // g通道进行处理
    vec2 terrain_0_g_uv=uv*60.0;  //草地
    vec4 terrain_0_g_col= texture(terrain_0_g, terrain_0_g_uv);
    col.rbg=mix( col.rbg,terrain_0_g_col.rbg,  terrain_0_col.g);

    nmmp= texture(terrain_0_g_n, terrain_0_g_uv).xyz - vec3(0.5);
    temp_normal = (nmmp.x *mormalStrength_0.y) * normalize(v_tangent.xyz) +(nmmp.y * mormalStrength_0.y) * normalize(bitangent) +nmmp.z * normalize(c_normal);
    normal=mix(normal,temp_normal,terrain_0_col.g);
    
    // b通道进行处理  石子路面
    vec2 terrain_0_b_uv=uv*50.0;  
    vec4 terrain_0_b_col= texture(terrain_0_b, terrain_0_b_uv);
    col.rbg=mix(col.rbg,terrain_0_b_col.rbg,   terrain_0_col.b);

    nmmp= texture(terrain_0_b_n, terrain_0_b_uv).xyz - vec3(0.5);
    temp_normal = (nmmp.x *mormalStrength_0.z) * normalize(v_tangent.xyz) +(nmmp.y * mormalStrength_0.z) * normalize(bitangent) +nmmp.z * normalize(c_normal);
    normal=mix(normal,temp_normal,terrain_0_col.b);


    // //第二张采样贴图进行采样
    // vec3 mormalStrength_1=vec3(1.0,1.0,1.0);
    // vec2 terrain_1_uv=uv;
    // vec4 terrain_1_col= texture(terrain_sample_1, terrain_1_uv);
    // // r通道进行处理 碎砖块
    // vec2 terrain_1_r_uv=uv*80.0;
    // vec4 terrain_1_r_col= texture(terrain_1_r, terrain_1_r_uv);
    // col.rbg=mix(col.rbg ,terrain_1_r_col.rbg, terrain_1_col.r);

    // nmmp= texture(terrain_1_r_n, terrain_1_r_uv).xyz - vec3(0.5);
    // temp_normal = (nmmp.x *mormalStrength_1.x) * normalize(v_tangent.xyz) +(nmmp.y * mormalStrength_1.x) * normalize(bitangent) +nmmp.z * normalize(c_normal);
    // normal=mix(normal,temp_normal,terrain_1_col.r);

    // //g通道 - 水滩
    // // r通道进行处理
    // vec4 water=vec4(0.09,0.157,0.208,1.0);  //25,40,53,255
    // col.rbg=mix(col.rbg ,water.rbg, terrain_1_col.g);

    if(weather==2.0){
      col.rbg=mix(col.rbg,vec3(1.0,1.0,1.0),0.8);
    }

  }




  void surf (out StandardSurface s) {
    vec4 baseColor = albedo;
    vec3 normal=v_normal;
    #if USE_ALBEDO_MAP
      vec4 col=vec4(1.0,1.0,1.0,1.0);
      customSample(col,normal);
      col.rgb = SRGBToLinear(col.rgb);
      baseColor *= col;
    #endif
    s.albedo = baseColor;
    s.albedo.rgb *= albedoScaleAndCutoff.xyz;

    #if USE_ALPHA_TEST
      if (s.albedo.ALPHA_TEST_CHANNEL < albedoScaleAndCutoff.w) discard;
    #endif

     
    // //当半径不小于0的时候有效
    // if(scanRadius>=0.0){
    //   vec3 worldPos=v_position;
    //   float dis=distance(worldPos,vec3(scanCenter.x,worldPos.y,scanCenter.z));
    //   float scanBorder=0.05;
    //   float alpha=0.0;
    //   dis=dis-scanRadius;   //小于0 圈内 ，大于0 圈外
    //   if(dis>=0.0){  //圈外
    //     alpha=max(0.5-dis,0.0);
    //     alpha=clamp(alpha,0.0,1.0)+step(dis,scanBorder);
    //   }else{  //圈内
    //     float angle=4.0;
    //     dis=dis+scanRadius;
    //     dis=dis-step(angle,scanRadius)*(scanRadius-angle);
    //     alpha=dis/min(scanRadius,angle);
    //     alpha*=0.3;
    //     alpha=clamp(alpha,0.0,1.0);
    //   }
    //   s.albedo.rgb=mix(s.albedo.rgb,scanColor.rgb,alpha);
    // }



    // #if CC_USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD
    //   vec4 lightColor = texture(cc_lightingMap, v_luv.xy);
    //   s.lightmap = lightColor.xyz * v_luv.z;
    //   s.lightmap_test = v_luv.z; /*lum*/
    // #endif

    s.normal = normal;

    #if CC_RECEIVE_SHADOW
      s.shadowBias = v_shadowBias;
    #endif

    // #if USE_NORMAL_MAP
    //   vec3 nmmp = texture(normalMap, NORMAL_UV).xyz - vec3(0.5);
    //   vec3 bitangent = cross(v_normal, v_tangent.xyz) * v_tangent.w; // note the cross order
    //   s.normal =
    //     (nmmp.x * emissiveScaleParam.w) * normalize(v_tangent.xyz) +
    //     (nmmp.y * emissiveScaleParam.w) * normalize(bitangent) +
    //     nmmp.z * normalize(s.normal);
    // #endif

    HIGHP_VALUE_TO_STRUCT_DEFINED(v_position, s.position);

    vec4 pbr = pbrParams;
    // #if USE_PBR_MAP
    //   vec4 res = texture(pbrMap, PBR_UV);
    //   pbr.x *= res.OCCLUSION_CHANNEL;
    //   pbr.y *= res.ROUGHNESS_CHANNEL;
    //   pbr.z *= res.METALLIC_CHANNEL;
    //   pbr.w *= res.SPECULAR_INTENSITY_CHANNEL;
    // #endif
    // #if USE_METALLIC_ROUGHNESS_MAP
    //   vec4 metallicRoughness = texture(metallicRoughnessMap, PBR_UV);
    //   pbr.z *= metallicRoughness.METALLIC_CHANNEL;
    //   pbr.y *= metallicRoughness.ROUGHNESS_CHANNEL;
    // #endif
    // #if USE_OCCLUSION_MAP
    //   pbr.x *= texture(occlusionMap, PBR_UV).OCCLUSION_CHANNEL;
    // #endif
    s.occlusion = pbr.x;
    s.roughness = pbr.y;
    s.specularIntensity = 0.5;
    s.metallic = pbr.z;

    s.emissive = emissive.rgb * emissiveScaleParam.xyz;
    // #if USE_EMISSIVE_MAP
    //   s.emissive *= SRGBToLinear(texture(emissiveMap, EMISSIVE_UV).rgb);
    // #endif
  }

  CC_STANDARD_SURFACE_ENTRY()
}%

CCProgram shadow-caster-vs %{
  precision highp float;
  #include <legacy/input-standard>
  #include <legacy/decode-base>
  #include <legacy/local-batch>
  #include <shared-ubos>
  #include <builtin/uniforms/cc-shadow>
#if CC_SUPPORT_CASCADED_SHADOW_MAP
  #include <builtin/uniforms/cc-csm>
#endif

  // #if HAS_SECOND_UV || CC_USE_LIGHTMAP
  //   in vec2 a_texCoord1;
  // #endif

  out vec2 v_uv;
  // #if HAS_SECOND_UV
  //   out vec2 v_uv1;
  // #endif
  out vec4 v_worldPos;

  out float v_clip_depth;

  vec4 vert () {
    StandardVertInput In;
    CCVertInput(In);

    mat4 matWorld, matWorldIT;
    CCGetWorldMatrixFull(matWorld, matWorldIT);

    v_worldPos = matWorld * In.position;
    vec4 clipPos = cc_matLightViewProj * v_worldPos;

    v_uv = a_texCoord * tilingOffset.xy + tilingOffset.zw;
    // #if HAS_SECOND_UV
    //   v_uv1 = a_texCoord1 * tilingOffset.xy + tilingOffset.zw;
    // #endif

    v_clip_depth = clipPos.z / clipPos.w * 0.5 + 0.5;

    return clipPos;
  }
}%

CCProgram shadow-caster-fs %{
  precision highp float;
  #include <shared-ubos>
  #include <common/data/packing>
  #include <legacy/shadow-map-base>

  in vec2 v_uv;
  #if HAS_SECOND_UV
    in vec2 v_uv1;
  #endif
  in vec4 v_worldPos;
  in float v_clip_depth;

  #if USE_ALBEDO_MAP
    uniform sampler2D albedoMap;
    #pragma define-meta ALBEDO_UV options([v_uv, v_uv1])
  #endif

  #if USE_ALPHA_TEST
    #pragma define-meta ALPHA_TEST_CHANNEL options([a, r])
  #endif

  vec4 frag () {
    vec4 baseColor = albedo;

    #if USE_ALBEDO_MAP
      baseColor *= texture(albedoMap, ALBEDO_UV);
    #endif

    #if USE_ALPHA_TEST
      if (baseColor.ALPHA_TEST_CHANNEL < albedoScaleAndCutoff.w) discard;
    #endif

    // spot use linear
    if(cc_shadowLPNNInfo.x > 0.000001 && cc_shadowLPNNInfo.x < 1.999999) {
      // enabled linear depth
      if (cc_shadowNFLSInfo.z > 0.000001) {
        return vec4(CCGetLinearDepth(v_worldPos.xyz), 1.0, 1.0, 1.0);
      }
    }

    if (cc_shadowLPNNInfo.y > 0.000001) {
      return packDepthToRGBA(v_clip_depth);
    }

    return vec4(v_clip_depth, 1.0, 1.0, 1.0);
  }
}%
